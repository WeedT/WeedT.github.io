<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Obladi</title>
  <subtitle>Ob La Di Ob La Da</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weedt.github.io/"/>
  <updated>2016-04-06T14:50:32.774Z</updated>
  <id>https://weedt.github.io/</id>
  
  <author>
    <name>Tan Jixin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL 纹理</title>
    <link href="https://weedt.github.io/2016/04/06/OpenGL-Texture-effect-pictures/"/>
    <id>https://weedt.github.io/2016/04/06/OpenGL-Texture-effect-pictures/</id>
    <published>2016-04-06T14:49:47.000Z</published>
    <updated>2016-04-06T14:50:32.774Z</updated>
    
    <content type="html">&lt;p&gt;明天更新&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;明天更新&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 命令（持续更新）</title>
    <link href="https://weedt.github.io/2016/04/02/Commonds-Of-Linux-to-be-continues/"/>
    <id>https://weedt.github.io/2016/04/02/Commonds-Of-Linux-to-be-continues/</id>
    <published>2016-04-02T08:06:41.000Z</published>
    <updated>2016-04-02T08:57:45.516Z</updated>
    
    <content type="html">&lt;h3 id=&quot;TIPs&quot;&gt;&lt;a href=&quot;#TIPs&quot; class=&quot;headerlink&quot; title=&quot;TIPs&quot;&gt;&lt;/a&gt;TIPs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bash命令基本格式：&lt;p style=&quot;text-align: center; font-weight: bold;&quot;&gt;命令名 [选项] [参数1] [参数2] ……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;命令名小写： DATE，Date和date是不同的，只有date是正确的。&lt;/li&gt;
&lt;li&gt;如果命令太长，一行放不下，可以在行尾输入“\”字符，shell会返回一个“&amp;gt;”作为提示符，表示命令未结束，允许继续输入有关信息。&lt;/li&gt;
&lt;li&gt;命令与选项和参数之间要用空格或者制表符隔开。多个空格会被shell解释为单个空格。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;who&lt;/strong&gt;&lt;br&gt;列出所有正在使用 &lt;em&gt;系统的用户&lt;/em&gt;、&lt;em&gt;所用终端名&lt;/em&gt;和 &lt;em&gt;注册到系统的时间&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/93736429gw1f2ig5p43rpj20b5024q3i.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;who am i 和 whoami：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/93736429gw1f2ig9rqw3rj20ax023q3f.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;echo&lt;/strong&gt;&lt;br&gt;将命令行的参数显示在屏幕上：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/93736429gw1f2igefoae2j20e7041jso.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;date&lt;/strong&gt;&lt;br&gt;显示或者设置系统日期和时间，详细请传送&lt;a href=&quot;http://www.cnblogs.com/peida/archive/2012/12/13/2815687.html&quot; title=&quot;每天一条Linux命令&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cal&lt;/strong&gt;&lt;br&gt;日历，显示1-9999年任意一年的或者月的日历。不带参数显示当月，一个参数解释为 &lt;em&gt;年&lt;/em&gt;，两个参数解释为 &lt;em&gt;月 年&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TIPs&quot;&gt;&lt;a href=&quot;#TIPs&quot; class=&quot;headerlink&quot; title=&quot;TIPs&quot;&gt;&lt;/a&gt;TIPs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bash命令基本格式：&lt;p style=&quot;text-align: center; font-weight: bo
    
    </summary>
    
      <category term="Note" scheme="https://weedt.github.io/categories/Note/"/>
    
    
      <category term="Linux" scheme="https://weedt.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Qt编译出错--可选解决方法</title>
    <link href="https://weedt.github.io/2015/06/01/A-solution-of-Qt-builds-error/"/>
    <id>https://weedt.github.io/2015/06/01/A-solution-of-Qt-builds-error/</id>
    <published>2015-06-01T13:54:12.000Z</published>
    <updated>2016-03-30T07:53:21.056Z</updated>
    
    <content type="html">&lt;p&gt;1.错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;错误:C1041: 无法打开程序数据库“mypath\vc120.pdb”；如果要将多个 CL.EXE 写入同一个 .PDB 文件，请使用 /FS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150504221903912&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      记录Qt各种错误
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Qt" scheme="https://weedt.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Boost库问题：无法识别的外部符号……</title>
    <link href="https://weedt.github.io/2015/05/04/The-solution-of-%22unkown-extern-symbol%22-when-using-Boost/"/>
    <id>https://weedt.github.io/2015/05/04/The-solution-of-"unkown-extern-symbol"-when-using-Boost/</id>
    <published>2015-05-04T13:54:12.000Z</published>
    <updated>2016-03-30T06:51:05.430Z</updated>
    
    <content type="html">&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;今天在用&lt;strong&gt;Qt&lt;/strong&gt;可视化&lt;strong&gt;CGAL&lt;/strong&gt;生成的图像的编程过程中遇到以下问题：&lt;br&gt;只要include了CGAL的头文件或者Boost库的头文件，编译就会出现“&lt;strong&gt;无法识别的外部符号&lt;/strong&gt;”，“&lt;strong&gt;无法识别的外部命令&lt;/strong&gt;”等错误。如下（由于我的问题已经解决，以下图片是我找的，并不是我当时出的问题）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150504215548443&quot; alt=&quot;错误信息&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在查找资料后，一直无法解决，我当时想有两种可能：1、需要包含相关的boost头文件；2、需要链接相关库文件，特别是boost库文件。包含几个头文件后无效，就放弃第一种方法。着手第二种方法，该链接什么库文件？我的程序只需要两个库文件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;libboost_thread-vc120-mt-gd-1_57.lib&lt;br&gt;libboost_system-vc120-mt-gd-1_57.lib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;妈蛋，什么问题？原来这两个库文件是32bit的，我在编译的时候疏忽了，没有加上&lt;strong&gt;address-model=64&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;重新编译这两个库文件&lt;/p&gt;
&lt;p&gt;参考1. &lt;a href=&quot;http://blog.csdn.net/enotswn/article/details/5934938&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于各种无法解析的外部符号问题的相应解决方案 &lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1066071/boost-linker-error-unresolved-external-symbol-class-boostsystemerror-categ/1067072&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Boost linker error: Unresolved external symbol “class boost::system::error_category const &amp;amp; __cdecl boost::system::get_system_category(void)”&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      今天在用**Qt**可视化**CGAL**生成的图像的编程过程中遇到以下问题：只要include了CGAL的头文件或者Boost库的头文件，编译就会出现“**无法识别的外部符号**”，“**无法识别的外部命令**”等错误。
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Boost" scheme="https://weedt.github.io/tags/Boost/"/>
    
  </entry>
  
  <entry>
    <title>MySql安装过程“Start Service”失败解决方法</title>
    <link href="https://weedt.github.io/2015/04/19/A-solution-of-the%20error-of-%E2%80%9CStart%20Service%E2%80%9Din-mysql-installation/"/>
    <id>https://weedt.github.io/2015/04/19/A-solution-of-the error-of-“Start Service”in-mysql-installation/</id>
    <published>2015-04-19T12:21:12.000Z</published>
    <updated>2016-03-30T07:52:59.824Z</updated>
    
    <content type="html">&lt;h4 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h4&gt;&lt;p&gt;mariadb-5.5.25-winx64&lt;/p&gt;
&lt;h4 id=&quot;问题产生过程及描述&quot;&gt;&lt;a href=&quot;#问题产生过程及描述&quot; class=&quot;headerlink&quot; title=&quot;问题产生过程及描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题产生过程及描述&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在安装MySql过程中遇到MySql服务启动失败问题，提示信息如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error 1920 service failed to start. Verify that you have sufficient privileges to start system services&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;导致MySql无法安装。软件无法自动启动，我就到&lt;strong&gt;控制面板–&amp;gt;管理工具–&amp;gt;服务&lt;/strong&gt;下找到MySql服务，手动打开，结果too young too simple，无法打开，提示&lt;strong&gt;1067&lt;/strong&gt;错误。 &lt;/p&gt;
&lt;p&gt;在网上查找资料，很多都是说&lt;em&gt;重新安装来解决&lt;/em&gt;，由于&lt;strong&gt;数据库只能装一次，如果你在你第一次没有装成功的情况下，你必须要卸载干净才能装得上&lt;/strong&gt;，我就清除与mysql相关文件及注册表，再重装，依然失败；Reboot，继续失败。&lt;/p&gt;
&lt;h4 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;我在安装过程中发现，可以先安装MySql而不安装MySql服务，我就想应该可以后来手动安装MySql服务。&lt;br&gt;于是将与mysql相关文件及注册表清除干净后，再次重装，在安装引导过程中，不勾选“&lt;strong&gt;install MySql service&lt;/strong&gt;”，…，可以顺利安装完毕。&lt;br&gt;然后手动安装MySql Service：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以&lt;strong&gt;管理员&lt;/strong&gt;身份启动命令提示符窗口.&lt;/li&gt;
&lt;li&gt;切换到MySql安装目录的bin目录下（&amp;gt;cd …\…\MariaDB\bin）。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;mysqld -install&lt;/strong&gt;（&amp;gt;mysqld -install），等待安装完毕。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;net start mysql&lt;/strong&gt;（&amp;gt;net start mysql），等待启动完毕。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150419115448365&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;安装完成。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      在安装MySql过程中遇到MySql服务启动失败问题，提示信息如下：Error 1920 service failed to start. Verify that you have sufficient privileges to start system services,导致MySql无法安装。软件无法自动启动，我就到**控制面板--&gt;管理工具--&gt;服务**下找到MySql服务，手动打开，结果too young too simple，无法打开，提示**1067**错误。
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="MySql" scheme="https://weedt.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Command Prompt 工具配置方法</title>
    <link href="https://weedt.github.io/2015/04/18/Visual-Studio-Command-Prompt-configure/"/>
    <id>https://weedt.github.io/2015/04/18/Visual-Studio-Command-Prompt-configure/</id>
    <published>2015-04-18T13:54:12.000Z</published>
    <updated>2016-03-30T07:52:32.832Z</updated>
    
    <content type="html">&lt;h4 id=&quot;软件版本：VS2013&quot;&gt;&lt;a href=&quot;#软件版本：VS2013&quot; class=&quot;headerlink&quot; title=&quot;软件版本：VS2013&quot;&gt;&lt;/a&gt;软件版本：VS2013&lt;/h4&gt;&lt;h4 id=&quot;如何打开这个工具？&quot;&gt;&lt;a href=&quot;#如何打开这个工具？&quot; class=&quot;headerlink&quot; title=&quot;如何打开这个工具？&quot;&gt;&lt;/a&gt;如何打开这个工具？&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;打开VS2013，在“&lt;strong&gt;工具&lt;/strong&gt;“菜单下可以找到。&lt;/li&gt;
&lt;li&gt;打开”&lt;strong&gt;开始&lt;/strong&gt;“，在程序菜单中找到VS2013，打开”&lt;strong&gt;Visual Studio Tools&lt;/strong&gt;“，可以找到&lt;strong&gt;Visual Studio Command Prompt&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;百度一下，有更多方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;如何增加这个工具&quot;&gt;&lt;a href=&quot;#如何增加这个工具&quot; class=&quot;headerlink&quot; title=&quot;如何增加这个工具&quot;&gt;&lt;/a&gt;如何增加这个工具&lt;/h4&gt;&lt;p&gt;如果实在找不到这个工具，那就是没有自动配置，我们可以手动增加这个工具：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开VS2013，”&lt;strong&gt;工具&lt;/strong&gt;“ –&amp;gt; ”&lt;strong&gt;外部工具&lt;/strong&gt;“，如下窗口：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150418221830238&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;点击”添加“，设置标题，命令和参数：&lt;br&gt;标题：&lt;strong&gt;Visual Studio Command Prompt&lt;/strong&gt;&lt;br&gt;命令：&lt;strong&gt;C:\Windows\System32\cmd.exe&lt;/strong&gt;&lt;br&gt;参数：&lt;strong&gt;%comspec% /k “”D:\Development\VS2013\VC\vcvarsall.bat”” x86&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击”确定“，增加成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;64-bit和32-bit&quot;&gt;&lt;a href=&quot;#64-bit和32-bit&quot; class=&quot;headerlink&quot; title=&quot;64-bit和32-bit&quot;&gt;&lt;/a&gt;64-bit和32-bit&lt;/h4&gt;&lt;p&gt;这个工具也分64位和32位，在不同情况下使用不同工具，应该要切换使用。&lt;br&gt;参考这篇文章&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/x4d2c09s.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to: Enable a 64-Bit Visual C++ Toolset on the Command Line&lt;/a&gt;，我们可以使用以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开命令行，切换到VS安装目录的VC目录下（…\…\Visual Studio 2013\VC），执行”&lt;strong&gt;vcvarsall amd64&lt;/strong&gt;“，便可切换为64位工具。更多命令参考上面链接。&lt;/li&gt;
&lt;li&gt;另外，我们也可以在VS的外部工具管理窗口，对Visual Studio Command Prompt设置参数，来打开64位或者32位工具。如上添加Visual Studio Command Prompt过程中，设置工具参数：&lt;br&gt;”&lt;strong&gt;%comspec% /k “”D:\Development\VS2013\VC\vcvarsall.bat”” x86&lt;/strong&gt;“  为32位&lt;br&gt;”&lt;strong&gt;%comspec% /k “”D:\Development\VS2013\VC\vcvarsall.bat”” amd64&lt;/strong&gt;“  为64位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，每次在使用前可以检查到底是64位还是32位，以免出错。检查方法：&lt;br&gt;打开Visual Studio Command Prompt后，执行&lt;strong&gt;cl.exe&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      介绍在VS2013下Visual Studio Command Prompt 工具配置方法
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="VS" scheme="https://weedt.github.io/tags/VS/"/>
    
  </entry>
  
  <entry>
    <title>boost库编译参数小结</title>
    <link href="https://weedt.github.io/2015/04/18/The-compilling-parameters-of-boost-lib/"/>
    <id>https://weedt.github.io/2015/04/18/The-compilling-parameters-of-boost-lib/</id>
    <published>2015-04-18T13:54:12.000Z</published>
    <updated>2016-03-30T06:53:30.181Z</updated>
    
    <content type="html">&lt;h4 id=&quot;32位编译：&quot;&gt;&lt;a href=&quot;#32位编译：&quot; class=&quot;headerlink&quot; title=&quot;32位编译：&quot;&gt;&lt;/a&gt;32位编译：&lt;/h4&gt;&lt;p&gt;从开始菜单启动Visual Studio 2013的vs2013 命令行，进入boost所在目录，运行bootstrap.bat&lt;br&gt;编译命令（例）：&lt;br&gt;&lt;code&gt;bjam.exe stage --toolset=msvc-12.0 --without-math  --stagedir=&amp;quot;vc12_x86&amp;quot; link=static runtime-link=shared threading=multi debug release&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;toolset&lt;/strong&gt;：指定编译器，可选的如borland、gcc、msvc（VC6）、msvc-10.0（VS2010）(vs2008 : msvc-9.0，vs2010 : msvc-10.0, VS2012、VS2013是msvc-12.0)&lt;br&gt;&lt;strong&gt;stagedir&lt;/strong&gt;:表示编译生成文件的路径。build-dir：编译生成的中间文件的路径。这个本人这里没用到，默认就在根目录（D:\boost\boost_1_57_0）下，目录名为bin.v2（删掉），等编译完成后可将这个目录全部删除（没用了），所以不需要去设置。&lt;br&gt;&lt;strong&gt;without/with&lt;/strong&gt;：选择不编译/编译哪些库。&lt;br&gt;&lt;strong&gt;address-model&lt;/strong&gt;：要有address-model=64属性，如果没有这个属性的话，会默认生成32位的平台库，加入这个选项才能生成64位的DLL。&lt;br&gt;&lt;strong&gt;threading&lt;/strong&gt;：单/多线程编译。一般都写多线程程序，当然要指定multi方式了；如果需要编写单线程程序，那么还需要编译单线程库，可以使用single方式。&lt;br&gt;&lt;strong&gt;link&lt;/strong&gt;：静态库版link=shared，动态库link=shared&lt;br&gt;&lt;strong&gt;runtime-link&lt;/strong&gt;：动态/静态链接C/C++运行时库。同样有shared和static两种方式，这样runtime-link和link一共可以产生4种组合方式，各人可以根据自己的需要选择编译。一般link只选static的话，只需要编译2种组合即可，即link=static runtime-link=shared和link=static runtime-link=static。&lt;br&gt;&lt;strong&gt;debug/release&lt;/strong&gt;：编译debug/release版本。一般都是程序的debug版本对应库的debug版本，所以两个都编译。&lt;/p&gt;
&lt;h4 id=&quot;64位编译：&quot;&gt;&lt;a href=&quot;#64位编译：&quot; class=&quot;headerlink&quot; title=&quot;64位编译：&quot;&gt;&lt;/a&gt;64位编译：&lt;/h4&gt;&lt;p&gt;从开始菜单启动Visual Studio 2013的vs2013 x64兼容工具命令行，然后转到boost根文件夹，运行bootstrap.bat生成x64版的bjam.exe。&lt;br&gt;在编译命令中加入address-model=64属性&lt;/p&gt;
&lt;h5 id=&quot;windows下boost库的命名特点：&quot;&gt;&lt;a href=&quot;#windows下boost库的命名特点：&quot; class=&quot;headerlink&quot; title=&quot;windows下boost库的命名特点：&quot;&gt;&lt;/a&gt;windows下boost库的命名特点：&lt;/h5&gt;&lt;p&gt;&lt;code&gt;link=static runtime-link=static 得到 libboostxxxxx.lib
link=shared runtime-link=shared 得到 boostxxxx.lib 和 boostxxxx.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由以上的文件夹层次结构基本就可以得出结论：&lt;br&gt;１、以“lib”开头的是“link-static”版本的，而直接以“boost”开头的是“link-shared”版本的。&lt;br&gt;２、有“d”的为debug版本，没有的则是release版本。&lt;br&gt;３、有“s”的为“runtime-link-static”版本，没有的则是“runtime-link-shared”版本。&lt;br&gt;４、有“mt”的为“threading-multi”版本，没有的则是“threading-single”版本。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文参考：&lt;a href=&quot;http://m.blog.csdn.net/blog/chenjh213/42265605&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vs2013 boost库编译小结&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      从开始菜单启动Visual Studio 2013的vs2013 命令行，进入boost所在目录，运行bootstrap.bat,编译命令（例）：bjam.exe stage --toolset=msvc-12.0 --without-math  --stagedir=&quot;vc12_x86&quot; link=static runtime-link=shared threading=multi debug release
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Boost" scheme="https://weedt.github.io/tags/Boost/"/>
    
  </entry>
  
  <entry>
    <title>Win8.1 x64 + VS2013 下CGAL安装及配置</title>
    <link href="https://weedt.github.io/2015/04/15/The-installation-and-configuration-of-cgal-under-Win8.1-x64+VS2013/"/>
    <id>https://weedt.github.io/2015/04/15/The-installation-and-configuration-of-cgal-under-Win8.1-x64+VS2013/</id>
    <published>2015-04-15T13:54:12.000Z</published>
    <updated>2016-03-30T07:51:33.977Z</updated>
    
    <content type="html">&lt;p&gt;本文基本参考CGAL官网提供的安装方法，但是重点在于在我安装过程中遇到的&lt;strong&gt;问题和解决方法&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows8.1 x64&lt;/li&gt;
&lt;li&gt;VS2013 x64&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cmake.org/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CMake3.2.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cgal.org/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CGAL4.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.boost.org/users/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Boost1.57&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.qt.io/zh-hans/download-open-source/#section-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt4.8.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.libqglviewer.com/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;libQGLViewer-2.6.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安装过程&quot;&gt;&lt;/a&gt;安装过程&lt;/h2&gt;&lt;h3 id=&quot;安装CMake&quot;&gt;&lt;a href=&quot;#安装CMake&quot; class=&quot;headerlink&quot; title=&quot;安装CMake&quot;&gt;&lt;/a&gt;安装CMake&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;安装Boost&quot;&gt;&lt;a href=&quot;#安装Boost&quot; class=&quot;headerlink&quot; title=&quot;安装Boost&quot;&gt;&lt;/a&gt;安装Boost&lt;/h3&gt;&lt;p&gt;我下载的是boost_1_57源码，所以需要自己编译。执行下面动作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开命令行窗口（Win + R）。&lt;/li&gt;
&lt;li&gt;切换到boost目录（&amp;gt;cd …/…/boost_1_57）。&lt;/li&gt;
&lt;li&gt;执行bootstrap.bat（&amp;gt;bootstrap.bat），等待执行完毕，目录会出现&lt;strong&gt;b2.exe&lt;/strong&gt;、&lt;strong&gt;bjam.exe&lt;/strong&gt;，查资料说他们基本一样，&lt;strong&gt;b2.exe&lt;/strong&gt;是&lt;strong&gt;bjam.exe&lt;/strong&gt;新版本而已。&lt;/li&gt;
&lt;li&gt;开始编译，执行&lt;strong&gt;b2.exe&lt;/strong&gt;（&amp;gt;b2.exe）。&lt;/li&gt;
&lt;li&gt;编译完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编译完毕之后要将boost相关目录加入环境变量&lt;br&gt;BOOST_LIBRARYDIR = …\…\boost_1_57\stage\lib&lt;br&gt;BOOST_INCLUDEDIR(or BOOST_ROOT)=…\…\boost_1_57&lt;/p&gt;
&lt;p&gt;而且将&lt;strong&gt;“…\…\boost_1_57\stage\lib”&lt;/strong&gt;，加入到环境变量PATH中&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;可能会出现的问题及解决方法&lt;/strong&gt;&lt;br&gt;在编译CGAL的过程中有可能会出现下面问题&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150418161908130&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;br&gt;回到boost编译过程中，用以下命令：&lt;br&gt; “&amp;gt;b2 –toolset=msvc-12.0 link=shared runtime-link=shared –with-system –with-thread”&lt;br&gt; 编译完毕之后，就可以在“…\…\boost_1_57”目录下看见：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150418162316311&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;安装Qt&quot;&gt;&lt;a href=&quot;#安装Qt&quot; class=&quot;headerlink&quot; title=&quot;安装Qt&quot;&gt;&lt;/a&gt;安装Qt&lt;/h3&gt;&lt;p&gt;Qt是用来运行CGAL 3D demo的，可以不装。&lt;br&gt;注意，CGAL是不支持Qt5的，请不要尝试下载安装Qt5来编译。&lt;br&gt;32位Qt4可直接下载安装，但是没有64位的Qt4，需要自己编译。我下载的是&lt;strong&gt;qt-everywhere-opensource-src-4.8.6&lt;/strong&gt;，以下是编译过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开&lt;strong&gt;Visual Studio  Command Prompt&lt;/strong&gt; （建议看看&lt;a href=&quot;&quot;&gt;注意事项&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;切换到Qt源码目录（&amp;gt;cd …/…/qt-everywhere-opensource-src-4.8.6）。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;Configure.exe&lt;/strong&gt;（&amp;gt;Configure.exe，你可以加入&lt;a href=&quot;http://blog.csdn.net/dztaopao/article/details/9243269&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一些参数&lt;/a&gt;），等待配置结束。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;nmake&lt;/strong&gt;（&amp;gt;nmake，你可以加入&lt;a href=&quot;&quot;&gt;一些参数&lt;/a&gt;），等待编译结束，过程大概2-3小时。&lt;/li&gt;
&lt;li&gt;编译结束后记得执行&lt;strong&gt;nmake clean&lt;/strong&gt;（&amp;gt;nmake clean）来清除临时文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编译结束后将Qt项目目录加入环境变量&lt;br&gt;QTDIR=…\…\qt-everywhere-opensource-src-4.8.2&lt;/p&gt;
&lt;p&gt;而且将&lt;strong&gt;“…\…\qt-everywhere-opensource-src-4.8.2\bin”&lt;/strong&gt;加入到环境变量PATH中&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;可能会出现的问题及解决方法 &lt;/strong&gt;&lt;br&gt;在用VS2013编译CGAL时，CGAL_Qt4等生成失败。&lt;br&gt;在我的案例中，是用&lt;strong&gt;Visual Studio Command Prompt&lt;/strong&gt;编译Qt时有问题。请注意，VS Command Prompt 有32位版本和64位版本，在我这个案例中，应该要用64位的工具。&lt;br&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;br&gt;如下启用64位：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开命令行窗口。&lt;/li&gt;
&lt;li&gt;切换到“…\…\Microsoft Visual Studio 12.0\VC“目录下（&amp;gt;cd …/…/Microsoft Visual Studio 12.0/VC）。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;vcvarsall amd64&lt;/strong&gt;（&amp;gt;vcvarsall amd64）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开&lt;strong&gt;VS2013&lt;/strong&gt; –&amp;gt; &lt;strong&gt;工具&lt;/strong&gt; –&amp;gt; &lt;strong&gt;外部工具&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如下界面中，选中&lt;strong&gt;Visual Studio Command Prompt&lt;/strong&gt;，在参数栏中设置成：&lt;strong&gt;”%comspec% /k “”D:\Development\VS2013\VC\vcvarsall.bat”” amd64“&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150418203400384&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;安装-amp-编译CGAL&quot;&gt;&lt;a href=&quot;#安装-amp-编译CGAL&quot; class=&quot;headerlink&quot; title=&quot;安装&amp;amp;编译CGAL&quot;&gt;&lt;/a&gt;安装&amp;amp;编译CGAL&lt;/h3&gt;&lt;p&gt;将CGAL安装到指定目录，选择你需要的版本（32-bit 或者 64-bit），我这里是选择64-bit。注意记得勾选&lt;strong&gt;GMP&lt;/strong&gt;和&lt;strong&gt;MPFR&lt;/strong&gt;。&lt;br&gt;然后设置环境变量：&lt;br&gt;    CGAL_DIR = …\…\CGAL-4.6&lt;/p&gt;
&lt;p&gt;接下来用CMake和VS编译CGAL&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开CMake-GUI&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;Where is the source code&lt;/strong&gt;后面选择CGAL安装路径，在&lt;strong&gt;Where to build the binaries&lt;/strong&gt;后面选择CGAL编译文件路径。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Configure&lt;/strong&gt;，选择合适编译工具。我这里选择&lt;strong&gt;Visual Studio 12 2013 Win64&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Generate&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;打开CGAL编译文件目录，用VS2013打开&lt;strong&gt;CGAL.sln&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;分别用&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两种方式编译生成解决方案。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;成功之后，将&lt;strong&gt;”…\…\CGAL-4.6\bin“&lt;/strong&gt;加入到环境变量PATH中。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;可能会出现的问题及解决方法 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Error1&lt;/strong&gt;： 在用CMake编译CGAL时，无法找到Qt4：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150418210824923&quot; alt=&quot;&quot;&gt;&lt;br&gt;这是提示Qt没有正确安装。&lt;br&gt;&lt;strong&gt;&lt;em&gt;解决方法&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果安装Qt4了，就要设置Qt4的相关环境变量。&lt;/li&gt;
&lt;li&gt;看看是不是安装的Qt5，CGAL不支持Qt5，需要重装为Qt4。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Error2&lt;/strong&gt;： 在用CMake编译CGAL时，出现”cannot find GMP”：&lt;br&gt;&lt;strong&gt;&lt;em&gt;解决方法&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;重装一下CGAL。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;安装及配置libQGLViewer&quot;&gt;&lt;a href=&quot;#安装及配置libQGLViewer&quot; class=&quot;headerlink&quot; title=&quot;安装及配置libQGLViewer&quot;&gt;&lt;/a&gt;安装及配置libQGLViewer&lt;/h3&gt;&lt;p&gt;libQGLViewer是用来运行CGAL 3D demo的。下面是配置方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解压到指定目录&lt;strong&gt;”…\…\libQGLViewer-2.6.1“&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;打开命令行窗口，切换到&lt;strong&gt;QGLViewer&lt;/strong&gt;目录下（&amp;gt;cd …\…\libQGLViewer-2.6.1\QGLViewer）。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;qmake.exe&lt;/strong&gt;（&amp;gt;qmake.exe），等待完毕。&lt;/li&gt;
&lt;li&gt;打开&lt;strong&gt;Visual Studio Command Prompt&lt;/strong&gt;，切换到&lt;strong&gt;QGLViewer&lt;/strong&gt;目录下（&amp;gt;cd …\…\libQGLViewer-2.6.1\QGLViewer）。&lt;/li&gt;
&lt;li&gt;执行&lt;strong&gt;nmake&lt;/strong&gt;（&amp;gt;nmake），等待执行完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后，将&lt;strong&gt;D:\Development\libQGLViewer-2.6.1\QGLViewer\debug&lt;/strong&gt;和&lt;strong&gt;D:\Development\libQGLViewer-2.6.1\QGLViewer\release&lt;/strong&gt;加入到环境变量PATH中。&lt;br&gt;而且，将libQGLViewer相关目录设置为环境变量：&lt;br&gt;    QGLVIEWERROOT = …\…\libQGLViewer-2.6.1&lt;/p&gt;
&lt;p&gt;至此，整个环境就配置好了。如何查看及demos和examples可以参考CGAL&lt;a href=&quot;http://www.cgal.org/download/windows.html#CompilinganExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方提供方法&lt;/a&gt;&lt;br&gt;有问题可以交流（weed_t@outlook.com）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      本文基本参考CGAL官网提供的安装方法，但是重点在于在我安装过程中遇到的**问题和解决方法**。
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Qt" scheme="https://weedt.github.io/tags/Qt/"/>
    
      <category term="Boost" scheme="https://weedt.github.io/tags/Boost/"/>
    
      <category term="CGAL" scheme="https://weedt.github.io/tags/CGAL/"/>
    
  </entry>
  
  <entry>
    <title>Qt 编码问题</title>
    <link href="https://weedt.github.io/2014/08/20/The-knowledge-of-Qt-endcoding/"/>
    <id>https://weedt.github.io/2014/08/20/The-knowledge-of-Qt-endcoding/</id>
    <published>2014-08-20T14:17:35.000Z</published>
    <updated>2016-04-07T15:03:33.824Z</updated>
    
    <content type="html">&lt;h4 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h4&gt;&lt;p&gt;首先看一个简单的程序：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;﻿#include &amp;lt;QCoreApplication&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;QTextStream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;QTextCodec&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char *argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QCoreApplication a(argc, argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString str = &amp;quot;我是中文&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QTextStream out(stdout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    out &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return a.exec();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出结果为：&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/93736429gw1f2ohe36n7dj206m039web.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;中文乱码了。&lt;br&gt;我们在之前（&lt;a href=&quot;http://weedt.github.io/2014/08/12/show-Chinese-text-in-Qt/&quot;&gt;点这里&lt;/a&gt;）讨论过解决办法。&lt;br&gt;今天来讨论一下为什么这么解决。&lt;/p&gt;
&lt;h4 id=&quot;探讨&quot;&gt;&lt;a href=&quot;#探讨&quot; class=&quot;headerlink&quot; title=&quot;探讨&quot;&gt;&lt;/a&gt;探讨&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;这是QString对中文字符不支持吗？不是，QString内部使用 &lt;strong&gt;Unicode&lt;/strong&gt; 编码，当然是支持中文的。出现输出乱码问题是编码问题。&lt;br&gt;文本文件都是有编码的，比如GBK，UTF-8，以上例子的源文件编码就是GBK。同一个文件用不同的编码，虽然看上去内容一样，但是物理表示方式不同；同理，用A编码存储的内容来用B编码解析，看到的都是乱码（Ps. Windows下压缩包在Linux下解压后中文文件名都是乱码T.T）。开始慢慢明白了，QString内部是Unicode编码，文件中的“我是中文”这几个字符是GBK编码，编码不一致导致乱码问题。但是还有一个问题，保存文件的编码方式千千万，QString对象如何知道文本的编码呢？你不告诉它，它肯定不知道，就会采取默认的方式——Latin-1，把赋值字符串当做 &lt;strong&gt;Latin-1&lt;/strong&gt; 编码来转换为Unicode。&lt;br&gt;所以在上面的例子中，把GBK编码的“我是中文”当做Latin-1转换为Unicode，输出当然为乱码。&lt;br&gt;&lt;strong&gt;解决方法1&lt;/strong&gt;：就是直接转换为Unicode（Windows中local8Bit就是GBK）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QString str = QString::fromLocal8Bit(&amp;quot;我是中文&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，如果文件为UTF-8编码就采取这种方式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QString str = QString::fromUtf8(&amp;quot;我是中文&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;QString提供的转换函数有限，如果没有合适的转换函数，可以使用QTextCodec：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QString QTextCodec::toUnicode ( const char * chars ) const&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法2&lt;/strong&gt;：明确告诉QString你的编码&lt;br&gt;Qt4：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextCodec::setCodecForCStrings(QTextCodec::codecForName(&amp;quot;GBK&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Qt5：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextCodec::setCodecForLocale(QTextCodec::codecForName(&amp;quot;GBK&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后转帖&lt;a href=&quot;http://blog.csdn.net/libaineu2004/article/details/19245205&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这儿&lt;/a&gt;的编码知识：&lt;br&gt;Qt常见的两种编码是:UTF-8和GBK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8：Unicode TransformationFormat-8bit，允许含BOM，但通常不含BOM。是用以解决国际上字符的一种多字节编码，它对英文使用8位（即一个字节），中文使用24为（三个字节）来编码。UTF-8包含全世界所有国家需要用到的字符，是国际编码，通用性强。UTF-8编码的文字可以在各国支持UTF8字符集的浏览器上显示。如，如果是UTF8编码，则在外国人的英文IE上也能显示中文，他们无需下载IE的中文语言支持包。&lt;/li&gt;
&lt;li&gt;GBK是国家标准GB2312基础上扩容后兼容GB2312的标准。GBK的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成1。GBK包含全部中文字符，是国家编码，通用性比UTF8差，不过UTF8占用的数据库比GBD大。GBK是GB2312的扩展，除了兼容GB2312外，它还能显示繁体中文，还有日文的假名。&lt;/li&gt;
&lt;li&gt;GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换：&lt;br&gt;GBK、GB2312－－Unicode－－UTF8&lt;br&gt;UTF8－－Unicode－－GBK、GB2312 &lt;/li&gt;
&lt;li&gt;在简体中文windows系统下，ANSI编码代表GBK/GB2312编码，ANSI通常使用0x80~0xFF范围的2个字节来表示1个中文字符。0x00~0x7F之间的字符，依旧是1个字节代表1个字符。Unicode(UTF-16)编码则所有字符都用2个字节表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://blog.csdn.net/brave_heart_lxl/article/details/7186631&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt中文乱码问题&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      文本文件都是有编码的，比如GBK，UTF-8，以上例子的源文件编码就是GBK。同一个文件用不同的编码，虽然看上去内容一样，但是物理表示方式不同；同理，用A编码存储的内容来用B编码解析，看到的都是乱码
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Qt" scheme="https://weedt.github.io/tags/Qt/"/>
    
      <category term="编码" scheme="https://weedt.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Qt下中文显示问题</title>
    <link href="https://weedt.github.io/2014/08/12/show-Chinese-text-in-Qt/"/>
    <id>https://weedt.github.io/2014/08/12/show-Chinese-text-in-Qt/</id>
    <published>2014-08-12T07:12:17.000Z</published>
    <updated>2016-04-02T07:36:52.779Z</updated>
    
    <content type="html">&lt;p&gt;Qt 4:&lt;br&gt;main函数中添加：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextCodec::setCodecForTr(QTextCodec::codecForName(&amp;quot;GB2312&amp;quot;));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;QTextCodec::setCodecForLocale(QTextCodec::codecForName(&amp;quot;GB2312&amp;quot;));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;QTextCodec::setCodecForCStrings(QTextCodec::codecForName(&amp;quot;GB2312&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要添加头文件：#include &lt;qtextcodec&gt;&lt;/qtextcodec&gt;&lt;/p&gt;
&lt;p&gt;Qt 5&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextCodec::setCodecForLocale(QTextCodec::codecForName(&amp;quot;GB2312&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Qt5中取消了setCodecForCStrings和setCodecForTr&lt;/p&gt;
</content>
    
    <summary type="html">
    
      QTextCodec::setCodecForLocale(QTextCodec::codecForName(&quot;GB2312&quot;));
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Qt" scheme="https://weedt.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>QObject::connect:No such slot问题解决办法</title>
    <link href="https://weedt.github.io/2014/08/02/The-solution-of-QObject-connect-No-such-slot/"/>
    <id>https://weedt.github.io/2014/08/02/The-solution-of-QObject-connect-No-such-slot/</id>
    <published>2014-08-02T09:23:29.000Z</published>
    <updated>2016-04-02T07:38:16.783Z</updated>
    
    <content type="html">&lt;p&gt;参考&lt;a href=&quot;http://blog.csdn.net/changli_90/article/details/8018376&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网上&lt;/a&gt;，有以下解决方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、看看你的类声明中有没有Q_OBJECT&lt;br&gt;2、你声明的函数要加声明:&lt;br&gt;     private slots:&lt;br&gt;        void xxxx();&lt;br&gt;3、检查槽函数名拼写是否有误，以及对应的signal和slot的参数是否一致&lt;br&gt;如果还不行的话,清理项目,删掉原有的moc_xxx.cpp,重新执行qmake.&lt;br&gt;还有一点要注意的是:signal和slots的参数要一样 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在实际操作中遇到一下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加入Q_OBJECT后出现以下错误：&lt;br&gt;错误 1 error LNK2001: 无法解析的外部符号 “public: virtual struct QMetaObject const &lt;em&gt; __thiscall Widget::metaObject(void)const “ (?metaObject@Widget@@UBEPBUQMetaObject@@XZ)&lt;br&gt;错误 2 error LNK2001: 无法解析的外部符号 “public: virtual void &lt;/em&gt; &lt;strong&gt;thiscall Widget::qt_metacast(char const *)” (?qt_metacast@Widget@@UAEPAXPBD@Z)&lt;br&gt;错误 3 error LNK2001: 无法解析的外部符号 “public: virtual int &lt;/strong&gt;thiscall Widget::qt_metacall(enum QMetaObject::Call,int,void &lt;em&gt; &lt;/em&gt;)” (?qt_metacall@Widget@@UAEHW4Call@QMetaObject@@HPAPAX@Z)&lt;br&gt;错误 4 fatal error LNK1120: 3 个无法解析的外部命令  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;br&gt;qmake一下 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      核心qmake一下
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="Qt" scheme="https://weedt.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>new内存失败后的正确处理</title>
    <link href="https://weedt.github.io/2014/06/11/How-to-handle-the-%22new%22-failure/"/>
    <id>https://weedt.github.io/2014/06/11/How-to-handle-the-"new"-failure/</id>
    <published>2014-06-11T07:11:55.000Z</published>
    <updated>2016-04-02T07:38:42.524Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://book.51cto.com/art/201202/317767.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://book.51cto.com/art/201202/317767.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      http://book.51cto.com/art/201202/317767.htm
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="内存管理" scheme="https://weedt.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>malloc/free and new/delete</title>
    <link href="https://weedt.github.io/2014/04/01/The-Difference-of-malloc-free-and-new-delete/"/>
    <id>https://weedt.github.io/2014/04/01/The-Difference-of-malloc-free-and-new-delete/</id>
    <published>2014-04-01T06:05:38.000Z</published>
    <updated>2016-04-01T07:05:21.814Z</updated>
    
    <content type="html">&lt;p&gt;今天在Qt下编写一个解析PCAP文件的小程序时，犯了一个基本错误：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString openUrl; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString saveDir; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; curFilterIndex; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        saveDir = &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        openUrl = &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        curFilterIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; Dlg_Attr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QString&lt;/strong&gt;是Qt框架下的一个字符串类，和std::string基本类似，然而在这个程序中我却习惯性给struct用了malloc来分配空间，结果导致错误。改用new自然就成功了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;malloc/free：&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;这是两个C/C++的标准库函数，函数原型为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void* malloc(int size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void free(void* ptr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;malloc只是进行分配指定大小内存，返回空间的首地址，并且是void类型的。free也只是回收内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;new/delete：&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;这是两个C++关键字，为对象的动态创建和销毁提供支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同&lt;/strong&gt;&lt;br&gt;两者最大的不同就是：malloc/free只是简单得进行内存分配，而new/delete是关键字，由编译器控制，不仅仅是分配空间，而且会执行构造函数和析构函数对对象进行创建和销毁。&lt;br&gt;另外，malloc分配的空间是无类型的，需要进行强制类型转换来转换成所需的类型；而new需要提供类型来创建对应类型的对象。&lt;/p&gt;
&lt;p&gt;前面的QString是类，用malloc当然不行啊，没有对它进行构造，没法用。&lt;br&gt;new/delete的特性是和C++的面向对象思想匹配的，在C++里面还是用new/delete吧。&lt;/p&gt;
&lt;p&gt;Ps：struct在C++里面和class基本上没啥差别，除了默认访问权限和默认继承权限不同，struct的都是public，而class的都是private。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      malloc/free是两个C/C++的标准库函数，new/delete是两个C++关键字
    
    </summary>
    
      <category term="Tech" scheme="https://weedt.github.io/categories/Tech/"/>
    
    
      <category term="内存管理" scheme="https://weedt.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="C++" scheme="https://weedt.github.io/tags/C/"/>
    
  </entry>
  
</feed>
